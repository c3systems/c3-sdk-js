const test = require('tape')
const BN = require('bn.js')
const hexutil = require('./hexutil')

const bn = (i) => new BN(i)

test('hexutil', t => {
  t.plan(18)

  t.equal(hexutil.encodeString('hello'), '0x68656c6c6f')
  t.equal(hexutil.encodeString('123'), '0x313233')
  t.deepEqual(hexutil.decodeString('0x1234'), Buffer.from([18, 52]))
  t.deepEqual(hexutil.encodeToString(Buffer.from('hello')), '0x68656c6c6f')
  t.deepEqual(hexutil.encodeBytes(Buffer.from('hello')), Buffer.from('68656c6c6f'))
  t.deepEqual(hexutil.decodeBytes(Buffer.from('68656c6c6f')), Buffer.from('hello'))
  t.equal(hexutil.encodeInt64(123), '0x7b')
  // t.deepEqual(hexutil.encodeInt64(-932445), '0xFFFFFFFFFFF1C5A3')
  t.equal(hexutil.decodeInt64('0x7B'), 123)
  // t.deepEqual(hexutil.encodeFloat64(123), '0x405EC00000000000')
  t.equal(hexutil.encodeFloat64(123), '0x42f60000')
  // t.deepEqual(hexutil.encodeFloat64(-561.2863), '0xC0818A4A57A786C2')
  // t.deepEqual(hexutil.decodeFloat64('0x405EC00000000000'), 123)
  t.equal(hexutil.decodeFloat64('0x42f60000'), 123)
  // t.deepEqual(hexutil.decodeFloat64('0xC0818A4A57A786C2'), -561.2863)
  t.equal(hexutil.encodeBigInt(bn(123)), '0x7b')
  t.equal(hexutil.encodeBigInt(bn(53452345)), '0x32f9e39')
  t.equal(hexutil.decodeBigInt('0x7B').toString('hex'), bn(123).toString('hex'))
  t.equal(hexutil.stripLeader('0x123'), '123')
  t.equal(hexutil.stripLeader('123'), '123')
  t.equal(hexutil.stripLeader('0x'), '')
  t.equal(hexutil.addLeader('123'), '0x123')
  t.equal(hexutil.addLeader('0x123'), '0x123')
})
